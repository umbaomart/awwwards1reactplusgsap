{"version":3,"sources":["main.80c30c80.chunk.css","App.scss","variables.scss","breakpoints.scss","header.scss","../variables.scss","banner.scss","../breakpoints.scss","cases.scss"],"names":[],"mappings":"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","file":"main.80c30c80.chunk.css","sourcesContent":["@import url(https://fonts.googleapis.com/css?family=Josefin+Sans:400,600,700&display=swap);\n.header{width:100%;height:128px;z-index:4;position:fixed}@media (max-width: 425px){.header{height:96px}}.header .logo a{font-style:1.2rem;letter-spacing:0.5rem;color:#000;text-decoration:none;font-weight:700}.header .nav{width:25px}@media (max-width: 425px){.header .nav{width:20px}}.main{height:50vh;background-color:#fff}.main .row{flex-direction:column;justify-content:center}.main .row h2{font-size:3rem;line-height:4.2rem;font-weight:700;z-index:10;color:#fff;mix-blend-mode:difference}@media (max-width: 768px){.main .row h2{font-size:2.4rem;line-height:3rem}}@media (max-width: 425px){.main .row h2{margin-top:72px;font-style:1.7rem;line-height:2.2rem}}.main .row h2 .line{margin-bottom:8px;height:56px;position:relative;overflow:hidden}@media (max-width: 768px){.main .row h2 .line{height:48px}}@media (max-width: 425px){.main .row h2 .line{height:32px}}.main .row h2 .line span{position:absolute}.main .row .btn-row{width:256px;position:relative;z-index:2}.main .row .btn-row a{font-style:1.6rem;color:#000;display:flex;align-items:center;font-weight:600}@media (max-width: 768px){.main .row .btn-row a{font-size:1.3rem}}@media (max-width: 425px){.main .row .btn-row a{font-size:1.1rem}}.main .row .btn-row a svg{margin-left:16px;border:2px solid #000;padding:12px;height:24px;width:24px;border-radius:100px;-webkit-transition:0.4s ease-in-out;transition:0.4s ease-in-out}@media (max-width: 768px){.main .row .btn-row a svg{padding:6px;width:20px;height:20px}}@media (max-width: 425px){.main .row .btn-row a svg{padding:6px;width:16px;height:16px}}.main .row .btn-row a:hover svg{background:#000;color:#fff}.cases{height:50vh;position:relative}.cases .cases-navigation{position:absolute;bottom:0;width:100%;display:flex;justify-content:space-between;align-items:center;z-index:6;padding:35px;box-sizing:border-box}@media (max-width: 768px){.cases .cases-navigation{display:none}}.cases .cases-navigation .cases-arrow{background:rgba(0,0,0,0.4);height:72px;width:72px;border-radius:100%;display:flex;align-items:center;justify-content:center}.cases .cases-navigation .cases-arrow svg{color:#fff;height:28px;width:28px}.cases .cases-navigation .cases-arrow.disabled{opacity:0.3}@media (max-width: 768px){.cases .row{flex-direction:column}}.cases .row .case{position:relative;background:#000;cursor:pointer;width:33.333%}@media (max-width: 768px){.cases .row .case{width:100%}}.cases .row .case:hover .case-image{opacity:.4}.cases .row .case-details{width:100%;height:50vh;height:calc(1vh * 50);height:calc(var(--vh, 1vh) * 50);display:flex;flex-direction:column;justify-content:center;padding:32px;box-sizing:border-box;z-index:1;position:relative}@media (max-width: 768px){.cases .row .case-details{width:100%}}@media (max-width: 425px){.cases .row .case-details{padding:16px}}.cases .row .case-details span{margin-top:156px;font-style:1.6rem;opacity:.8;font-weight:600;color:#fff}@media (max-width: 1366px){.cases .row .case-details span{font-size:1.4rem}}@media (max-width: 425px){.cases .row .case-details span{font-size:1.4rem;line-height:2.2rem}}.cases .row .case-details h2{font-style:2.4rem;line-height:3.4rem;width:85%;color:#fff;margin-top:16px}@media (max-width: 1366px){.cases .row .case-details h2{font-size:2rem;line-height:2.4rem}}@media (max-width: 425px){.cases .row .case-details h2{font-size:1.7rem;line-height:2.2rem;margin-top:8px}}.cases .row .case-image{top:0;left:0;width:100%;height:100%;overflow:hidden;position:absolute;opacity:.65;-webkit-transition:0.4s cubic-bezier(0.6, -0.5, 0.1, 0.99);transition:0.4s cubic-bezier(0.6, -0.5, 0.1, 0.99)}.cases .row .case-image img{height:100%;width:100%;object-fit:cover}body,html{visibility:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;background:#fff;-ms-scroll-chaining:none;overscroll-behavior:none;margin:0;font-family:\"Josefin Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.container{width:1560px;min-width:1560px;margin:0 auto;height:100%}@media (max-width: 1560px){.container{width:1280px;min-width:1280px}}@media (max-width: 1366px){.container{width:1080px;min-width:1080px}}@media (max-width: 1080px){.container{width:100%;min-width:100%}}.container .row{display:flex;height:100%;padding:0 32px}@media (max-width: 425px){.container .row{padding:0 16px}}.container .v-center{align-items:center}.container .space-between{justify-content:space-between}.container-fluid{width:100%;height:100%}.container-fluid .row{display:flex;height:100%}.intro-overlay .top{height:50vh;position:absolute;width:100%;z-index:8}.intro-overlay .top .overlay-top{position:absolute;height:100%;width:33.333%;background:#000;bottom:0;left:0;right:0}@media (max-width: 768px){.intro-overlay .top .overlay-top{width:100%}}.intro-overlay .top .overlay-top:nth-child(2){left:33.333%}@media (max-width: 768px){.intro-overlay .top .overlay-top:nth-child(2){display:none}}.intro-overlay .top .overlay-top:nth-child(3){left:66.666%}@media (max-width: 768px){.intro-overlay .top .overlay-top:nth-child(3){display:none}}.intro-overlay .bottom{height:50vh;position:absolute;width:100%;z-index:8;bottom:0}.intro-overlay .bottom .overlay-bottom{position:absolute;height:100%;width:33.333%;background:#000;bottom:0;right:66.666%}@media (max-width: 768px){.intro-overlay .bottom .overlay-bottom{right:0;width:100%}}.intro-overlay .bottom .overlay-bottom:nth-child(2){right:33.333%}@media (max-width: 768px){.intro-overlay .bottom .overlay-bottom:nth-child(2){width:100%;top:100%;right:0}}.intro-overlay .bottom .overlay-bottom:nth-child(3){right:0}@media (max-width: 768px){.intro-overlay .bottom .overlay-bottom:nth-child(3){width:100%;top:200%}}\n\n.header{width:100%;height:128px;z-index:4;position:fixed}@media (max-width: 425px){.header{height:96px}}.header .logo a{font-style:1.2rem;letter-spacing:0.5rem;color:#000;text-decoration:none;font-weight:700}.header .nav{width:25px}@media (max-width: 425px){.header .nav{width:20px}}\n\n.main{height:50vh;background-color:#fff}.main .row{flex-direction:column;justify-content:center}.main .row h2{font-size:3rem;line-height:4.2rem;font-weight:700;z-index:10;color:#fff;mix-blend-mode:difference}@media (max-width: 768px){.main .row h2{font-size:2.4rem;line-height:3rem}}@media (max-width: 425px){.main .row h2{margin-top:72px;font-style:1.7rem;line-height:2.2rem}}.main .row h2 .line{margin-bottom:8px;height:56px;position:relative;overflow:hidden}@media (max-width: 768px){.main .row h2 .line{height:48px}}@media (max-width: 425px){.main .row h2 .line{height:32px}}.main .row h2 .line span{position:absolute}.main .row .btn-row{width:256px;position:relative;z-index:2}.main .row .btn-row a{font-style:1.6rem;color:#000;display:flex;align-items:center;font-weight:600}@media (max-width: 768px){.main .row .btn-row a{font-size:1.3rem}}@media (max-width: 425px){.main .row .btn-row a{font-size:1.1rem}}.main .row .btn-row a svg{margin-left:16px;border:2px solid #000;padding:12px;height:24px;width:24px;border-radius:100px;-webkit-transition:0.4s ease-in-out;transition:0.4s ease-in-out}@media (max-width: 768px){.main .row .btn-row a svg{padding:6px;width:20px;height:20px}}@media (max-width: 425px){.main .row .btn-row a svg{padding:6px;width:16px;height:16px}}.main .row .btn-row a:hover svg{background:#000;color:#fff}\n\n.cases{height:50vh;position:relative}.cases .cases-navigation{position:absolute;bottom:0;width:100%;display:flex;justify-content:space-between;align-items:center;z-index:6;padding:35px;box-sizing:border-box}@media (max-width: 768px){.cases .cases-navigation{display:none}}.cases .cases-navigation .cases-arrow{background:rgba(0,0,0,0.4);height:72px;width:72px;border-radius:100%;display:flex;align-items:center;justify-content:center}.cases .cases-navigation .cases-arrow svg{color:#fff;height:28px;width:28px}.cases .cases-navigation .cases-arrow.disabled{opacity:0.3}@media (max-width: 768px){.cases .row{flex-direction:column}}.cases .row .case{position:relative;background:#000;cursor:pointer;width:33.333%}@media (max-width: 768px){.cases .row .case{width:100%}}.cases .row .case:hover .case-image{opacity:.4}.cases .row .case-details{width:100%;height:50vh;height:calc(1vh * 50);height:calc(var(--vh, 1vh) * 50);display:flex;flex-direction:column;justify-content:center;padding:32px;box-sizing:border-box;z-index:1;position:relative}@media (max-width: 768px){.cases .row .case-details{width:100%}}@media (max-width: 425px){.cases .row .case-details{padding:16px}}.cases .row .case-details span{margin-top:156px;font-style:1.6rem;opacity:.8;font-weight:600;color:#fff}@media (max-width: 1366px){.cases .row .case-details span{font-size:1.4rem}}@media (max-width: 425px){.cases .row .case-details span{font-size:1.4rem;line-height:2.2rem}}.cases .row .case-details h2{font-style:2.4rem;line-height:3.4rem;width:85%;color:#fff;margin-top:16px}@media (max-width: 1366px){.cases .row .case-details h2{font-size:2rem;line-height:2.4rem}}@media (max-width: 425px){.cases .row .case-details h2{font-size:1.7rem;line-height:2.2rem;margin-top:8px}}.cases .row .case-image{top:0;left:0;width:100%;height:100%;overflow:hidden;position:absolute;opacity:.65;-webkit-transition:0.4s cubic-bezier(0.6, -0.5, 0.1, 0.99);transition:0.4s cubic-bezier(0.6, -0.5, 0.1, 0.99)}.cases .row .case-image img{height:100%;width:100%;object-fit:cover}\n\n","@import url(\"https://fonts.googleapis.com/css?family=Josefin+Sans:400,600,700&display=swap\");\n@import \"./variables.scss\";\n@import \"./breakpoints.scss\";\n@import \"./components/header.scss\";\n@import \"./components/banner.scss\";\n@import \"./components/cases.scss\";\n\nbody,\nhtml {\n  visibility: hidden;\n  user-select: none;\n  background: $white;\n  overscroll-behavior: none;\n  margin: 0;\n  font-family: \"Josefin Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\",\n    \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\",\n    \"Helvetica Neue\", sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n.container {\n  width: 1560px;\n  min-width: 1560px;\n  margin: 0 auto;\n  height: 100%;\n  @include media(\"<=1560px\") {\n    width: 1280px;\n    min-width: 1280px;\n  }\n  @include media(\"<=desktop\") {\n    width: 1080px;\n    min-width: 1080px;\n  }\n  @include media(\"<=1080px\") {\n    width: 100%;\n    min-width: 100%;\n  }\n  .row {\n    display: flex;\n    height: 100%;\n    padding: 0 32px;\n    @include media(\"<=phone\") {\n      padding: 0 16px;\n    }\n  }\n  .v-center {\n    align-items: center;\n  }\n  .space-between {\n    justify-content: space-between;\n  }\n}\n\n.container-fluid {\n  width: 100%;\n  height: 100%;\n  .row {\n    display: flex;\n    height: 100%;\n  }\n}\n\n.intro-overlay {\n\n  .top {\n    height: 50vh;\n    position: absolute;\n    width: 100%;\n    z-index: 8;\n    .overlay-top {\n      position: absolute;\n      height: 100%;\n      width: 33.333%;\n      background: $black;\n      bottom: 0;\n      left: 0;\n      right: 0;\n      @include media('<=tablet') {\n        width: 100%;\n      }\n      &:nth-child(2) {\n        left: 33.333%;\n          @include media('<=tablet') {\n            display: none;\n          }\n      }\n      &:nth-child(3) {\n        left: 66.666%;\n          @include media('<=tablet') {\n            display: none;\n          }\n      }\n    }\n  }\n  .bottom {\n    height: 50vh;\n    position: absolute;\n    width: 100%;\n    z-index: 8;\n    bottom: 0;\n    .overlay-bottom {\n      position: absolute;\n      height: 100%;\n      width: 33.333%;\n      background: $black;\n      bottom: 0;\n      right: 66.666%;\n      @include media('<=tablet') {\n        right: 0;\n        width: 100%;\n      }\n      &:nth-child(2) {\n        right: 33.333%;\n          @include media('<=tablet') {\n            width: 100%;\n            top: 100%;\n            right: 0;\n          }\n      }\n      &:nth-child(3) {\n        right: 0;\n          @include media('<=tablet') {\n            width: 100%;\n            top: 200%;\n          }\n      }\n    }\n  }\n}\n\n","$black: #000000;\n$white: #ffffff;\n","$breakpoints: (\n  \"phone\": 425px,\n  \"tablet\": 768px,\n  \"desktop\": 1366px,\n  \"LGdesktop\": 1920px\n) !default;\n\n///\n/// Creates a list of static expressions or media types\n///\n/// @author Eduardo Boucas\n///\n/// @example scss - Creates a single media type (screen)\n///  $media-expressions: ('screen': 'screen');\n///\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\n///  $media-expressions: (\n///\t\t'retina2x': (\n///\t\t\t'(-webkit-min-device-pixel-ratio: 2)',\n///\t\t\t'(min-resolution: 192dpi)'\n///\t\t)\n///\t);\n///\n$media-expressions: (\n  \"screen\": \"screen\",\n  \"print\": \"print\",\n  \"handheld\": \"handheld\",\n  \"retina2x\": (\n    \"(-webkit-min-device-pixel-ratio: 2)\",\n    \"(min-resolution: 192dpi)\"\n  ),\n  \"retina3x\": (\n    \"(-webkit-min-device-pixel-ratio: 3)\",\n    \"(min-resolution: 350dpi)\"\n  )\n) !default;\n\n///\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\n///\n/// @author Eduardo Boucas\n///\n/// @example scss - Interval for pixels is defined as `1` by default\n///  @include media(\">128px\") {}\n///\n///\t /* Generates: */\n///\t @media (min-width: 129px) {}\n///\n/// @example scss - Interval for ems is defined as `0.01` by default\n///  @include media(\">20em\") {}\n///\n///\t /* Generates: */\n///\t @media (min-width: 20.01em) {}\n///\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\n///  @include media(\">2.0rem\") {}\n///\n///\t /* Generates: */\n///\t @media (min-width: 2.1rem) {}\n///\n$unit-intervals: (\n  \"px\": 1,\n  \"em\": 0.01,\n  \"rem\": 0.1\n) !default;\n///\n/// Generates a media query based on a list of conditions\n///\n/// @author Eduardo Boucas\n///\n/// @param {List}   $conditions  - Media query conditions\n///\n/// @example scss - With a single set breakpoint\n///  @include media(\">phone\") { }\n///\n/// @example scss - With two set breakpoints\n///  @include media(\">phone\", \"<=tablet\") { }\n///\n/// @example scss - With custom values\n///  @include media(\">=358px\", \"<850px\") { }\n///\n/// @example scss - With set breakpoints with custom values\n///  @include media(\">desktop\", \"<=1350px\") { }\n///\n/// @example scss - With a static expression\n///  @include media(\"retina2x\") { }\n///\n/// @example scss - Mixing everything\n///  @include media(\">=350px\", \"<tablet\", \"retina3x\") { }\n///\n@mixin media($conditions...) {\n  @for $i from 1 through length($conditions) {\n    $conditions: set-nth(\n      $conditions,\n      $i,\n      parse-expression(nth($conditions, $i))\n    );\n  }\n\n  $branches: get-query-branches($conditions);\n  $query: \"\";\n\n  @each $branch in $branches {\n    @if (str-length($query) != 0) {\n      $query: $query + \", \";\n    }\n\n    $query: $query + $branch;\n  }\n\n  @media #{$query} {\n    @content;\n  }\n}\n\n///\n/// Reads a list of media query expressions and separates logical disjunctions into different branches\n///\n/// @author Eduardo Boucas\n///\n/// @param {List}   $expressions  - list of expressions\n///\n/// @throws `$expression` is not a valid expression\n///\n/// @return {List | Null}\n///\n@function get-query-branches($expressions) {\n  $result: \"\";\n  $has-groups: false;\n\n  // Getting initial snapshot and looking for groups\n  @each $expression in $expressions {\n    @if (str-length($result) != 0) {\n      $result: $result + \" and \";\n    }\n\n    @if (type-of($expression) == \"string\") {\n      $result: $result + $expression;\n    } @else if (type-of($expression) == \"list\") {\n      $result: $result + nth($expression, 1);\n      $has-groups: true;\n    } @else {\n      @warn '#{$expression} is not a valid expression.';\n    }\n  }\n\n  // If we have groups, we have to create all possible combinations\n  @if $has-groups {\n    @each $expression in $expressions {\n      @if (type-of($expression) == \"list\") {\n        $first: nth($expression, 1);\n\n        @each $member in $expression {\n          @if ($member != $first) {\n            @each $partial in $result {\n              $result: join(\n                $result,\n                str-replace-first($first, $member, $partial)\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  @return $result;\n}\n\n///\n/// Parses a string to form a media query expression\n///\n/// @author Eduardo Boucas\n///\n/// @param {String}   $expression  - expression (in string)\n///\n/// @throws Expression with type `type-of($expression)` detected, string expected\n/// @throws `$expression` is missing an operator\n/// @throws Unknown unit: `$unit`\n///\n/// @return {String | Null}\n///\n@function parse-expression($expression) {\n  $operator: \"\";\n  $value: \"\";\n  $element: \"\";\n  $result: \"\";\n  $is-width: true;\n\n  @if (type-of($expression) != \"string\") {\n    @warn 'Expression with type `#{type-of($expression)}` detected, string expected.';\n  }\n\n  // Separating the operator from the rest of the expression\n  @if (str-slice($expression, 2, 2) == \"=\") {\n    $operator: str-slice($expression, 1, 2);\n    $value: str-slice($expression, 3);\n  } @else {\n    $operator: str-slice($expression, 1, 1);\n    $value: str-slice($expression, 2);\n  }\n\n  // Checking what type of expression we're dealing with\n  @if map-has-key($breakpoints, $value) {\n    $result: map-get($breakpoints, $value);\n  } @else if map-has-key($media-expressions, $expression) {\n    $result: map-get($media-expressions, $expression);\n    $is-width: false;\n  } @else {\n    $result: to-number($value);\n  }\n\n  @if ($is-width) {\n    $unit: unit($result);\n    $interval: 0;\n\n    @if (map-has-key($unit-intervals, $unit)) {\n      $interval: map-get($unit-intervals, $unit);\n    } @else {\n      @warn 'Unknown unit: #{$unit}';\n    }\n\n    @if ($operator == \">\") {\n      $element: \"(min-width: #{$result + $interval})\";\n    } @else if ($operator == \"<\") {\n      $element: \"(max-width: #{$result - $interval})\";\n    } @else if ($operator == \">=\") {\n      $element: \"(min-width: #{$result})\";\n    } @else if ($operator == \"<=\") {\n      $element: \"(max-width: #{$result})\";\n    } @else {\n      @warn '#{$expression} is missing an operator.';\n    }\n  } @else {\n    $element: $result;\n  }\n\n  @return $element;\n}\n\n///\n/// Replaces the first occurence of the string with the replacement string\n///\n/// @author Eduardo Boucas\n///\n/// @param {String}   $search  - The value being searched for\n/// @param {String}   $replace  - The replacement string\n/// @param {String}   $subject  - The string being replaced on\n///\n/// @return {String | Null}\n///\n@function str-replace-first($search, $replace, $subject) {\n  $search-start: str-index($subject, $search);\n\n  @if $search-start == null {\n    @return $subject;\n  }\n\n  $result: str-slice($subject, 0, $search-start - 1);\n  $result: $result + $replace;\n  $result: $result + str-slice($subject, $search-start + str-length($search));\n\n  @return $result;\n}\n\n///\n/// Casts a number to a string\n///\n/// @author Hugo Giraudel\n///\n/// @param {String}   $string  - Number to be parsed\n///\n/// @return {List | Null}\n///\n@function to-number($string) {\n  // Matrices\n  $strings: \"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\";\n  $numbers: 0 1 2 3 4 5 6 7 8 9;\n\n  // Result\n  $result: 0;\n  $divider: 0;\n  $minus: false;\n\n  // Looping through all characters\n  @for $i from 1 through str-length($string) {\n    $character: str-slice($string, $i, $i);\n    $index: index($strings, $character);\n\n    @if $character == \"-\" {\n      $minus: true;\n    } @else if $character == \".\" {\n      $divider: 1;\n    } @else {\n      @if type-of($index) != \"number\" {\n        $result: if($minus, $result * -1, $result);\n        @return _length($result, str-slice($string, $i));\n      }\n\n      $number: nth($numbers, $index);\n\n      @if $divider == 0 {\n        $result: $result * 10;\n      } @else {\n        // Move the decimal dot to the left\n        $divider: $divider * 10;\n        $number: $number / $divider;\n      }\n\n      $result: $result + $number;\n    }\n  }\n\n  @return if($minus, $result * -1, $result);\n}\n\n@function _length($number, $unit) {\n  $strings: \"px\" \"cm\" \"mm\" \"%\" \"ch\" \"pica\" \"in\" \"em\" \"rem\" \"pt\" \"pc\" \"ex\" \"vw\"\n    \"vh\" \"vmin\" \"vmax\";\n  $units: 1px 1cm 1mm 1% 1ch 1pica 1in 1em 1rem 1pt 1pc 1ex 1vw 1vh 1vmin 1vmax;\n  $index: index($strings, $unit);\n\n  @if type-of($index) != \"number\" {\n    @warn 'Unknown unit `#{$unit}`.';\n    @return false;\n  }\n\n  @return $number * nth($units, $index);\n}\n","@import \"../variables.scss\";\r\n@import \"../breakpoints.scss\";\r\n\r\n.header {\r\n    width: 100%;\r\n    height: 128px;\r\n    z-index: 4;\r\n    position: fixed;\r\n    @include media(\"<=phone\") {\r\n        height: 96px;\r\n    }\r\n    .logo {\r\n        a {\r\n            font-style: 1.2rem;\r\n            letter-spacing: 0.5rem;\r\n            color: $black;\r\n            text-decoration: none;\r\n            font-weight: 700;\r\n        }\r\n    }\r\n    .nav {\r\n        width: 25px;\r\n        @include media(\"<=phone\") {\r\n            width: 20px;\r\n        }\r\n        span { \r\n\r\n        }\r\n    }\r\n}","$black: #000000;\n$white: #ffffff;\n","@import \"../variables.scss\";\r\n@import \"../breakpoints.scss\";\r\n\r\n.main {\r\n    height: 50vh;\r\n    // height: calc(var(--vh, 1vh) * 50);\r\n    background-color: #fff;\r\n    .row {\r\n        flex-direction: column;\r\n        justify-content: center;\r\n        h2 {\r\n            font-size: 3rem;\r\n            line-height: 4.2rem;\r\n            font-weight: 700;\r\n            z-index: 10;\r\n            color: $white;\r\n            mix-blend-mode: difference;\r\n            @include media(\"<=tablet\") {\r\n                font-size: 2.4rem;\r\n                line-height: 3rem;\r\n            }\r\n            @include media(\"<=phone\") {\r\n                margin-top: 72px;\r\n                font-style: 1.7rem;\r\n                line-height: 2.2rem;\r\n            }\r\n            .line {\r\n                margin-bottom: 8px;\r\n                height: 56px;\r\n                position: relative;\r\n                overflow: hidden;\r\n                @include media(\"<=tablet\") {\r\n                    height: 48px;\r\n                }\r\n                @include media(\"<=phone\") {\r\n                    height: 32px;\r\n                }\r\n                span {\r\n                    position: absolute;\r\n                }\r\n            }\r\n        }\r\n        .btn-row {\r\n            width: 256px;\r\n            position: relative;\r\n            z-index: 2;\r\n            a {\r\n                font-style: 1.6rem;\r\n                color: $black;\r\n                display: flex;\r\n                align-items: center;\r\n                font-weight: 600;\r\n                @include media(\"<=tablet\") {\r\n                    font-size: 1.3rem;\r\n                }\r\n                @include media(\"<=phone\") {\r\n                    font-size: 1.1rem;\r\n                }\r\n                svg {\r\n                    margin-left: 16px;\r\n                    border: 2px solid $black;\r\n                    padding: 12px;\r\n                    height: 24px;\r\n                    width: 24px;\r\n                    border-radius: 100px;\r\n                    transition: 0.4s ease-in-out;\r\n                    @include media(\"<=tablet\") {\r\n                        padding: 6px;\r\n                        width: 20px;\r\n                        height: 20px;\r\n                    }\r\n                    @include media(\"<=phone\") {\r\n                        padding: 6px;\r\n                        width: 16px;\r\n                        height: 16px;\r\n                    }\r\n                }\r\n                &:hover {\r\n                    svg {\r\n                        background: $black;\r\n                        color: $white;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","$breakpoints: (\n  \"phone\": 425px,\n  \"tablet\": 768px,\n  \"desktop\": 1366px,\n  \"LGdesktop\": 1920px\n) !default;\n\n///\n/// Creates a list of static expressions or media types\n///\n/// @author Eduardo Boucas\n///\n/// @example scss - Creates a single media type (screen)\n///  $media-expressions: ('screen': 'screen');\n///\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\n///  $media-expressions: (\n///\t\t'retina2x': (\n///\t\t\t'(-webkit-min-device-pixel-ratio: 2)',\n///\t\t\t'(min-resolution: 192dpi)'\n///\t\t)\n///\t);\n///\n$media-expressions: (\n  \"screen\": \"screen\",\n  \"print\": \"print\",\n  \"handheld\": \"handheld\",\n  \"retina2x\": (\n    \"(-webkit-min-device-pixel-ratio: 2)\",\n    \"(min-resolution: 192dpi)\"\n  ),\n  \"retina3x\": (\n    \"(-webkit-min-device-pixel-ratio: 3)\",\n    \"(min-resolution: 350dpi)\"\n  )\n) !default;\n\n///\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\n///\n/// @author Eduardo Boucas\n///\n/// @example scss - Interval for pixels is defined as `1` by default\n///  @include media(\">128px\") {}\n///\n///\t /* Generates: */\n///\t @media (min-width: 129px) {}\n///\n/// @example scss - Interval for ems is defined as `0.01` by default\n///  @include media(\">20em\") {}\n///\n///\t /* Generates: */\n///\t @media (min-width: 20.01em) {}\n///\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\n///  @include media(\">2.0rem\") {}\n///\n///\t /* Generates: */\n///\t @media (min-width: 2.1rem) {}\n///\n$unit-intervals: (\n  \"px\": 1,\n  \"em\": 0.01,\n  \"rem\": 0.1\n) !default;\n///\n/// Generates a media query based on a list of conditions\n///\n/// @author Eduardo Boucas\n///\n/// @param {List}   $conditions  - Media query conditions\n///\n/// @example scss - With a single set breakpoint\n///  @include media(\">phone\") { }\n///\n/// @example scss - With two set breakpoints\n///  @include media(\">phone\", \"<=tablet\") { }\n///\n/// @example scss - With custom values\n///  @include media(\">=358px\", \"<850px\") { }\n///\n/// @example scss - With set breakpoints with custom values\n///  @include media(\">desktop\", \"<=1350px\") { }\n///\n/// @example scss - With a static expression\n///  @include media(\"retina2x\") { }\n///\n/// @example scss - Mixing everything\n///  @include media(\">=350px\", \"<tablet\", \"retina3x\") { }\n///\n@mixin media($conditions...) {\n  @for $i from 1 through length($conditions) {\n    $conditions: set-nth(\n      $conditions,\n      $i,\n      parse-expression(nth($conditions, $i))\n    );\n  }\n\n  $branches: get-query-branches($conditions);\n  $query: \"\";\n\n  @each $branch in $branches {\n    @if (str-length($query) != 0) {\n      $query: $query + \", \";\n    }\n\n    $query: $query + $branch;\n  }\n\n  @media #{$query} {\n    @content;\n  }\n}\n\n///\n/// Reads a list of media query expressions and separates logical disjunctions into different branches\n///\n/// @author Eduardo Boucas\n///\n/// @param {List}   $expressions  - list of expressions\n///\n/// @throws `$expression` is not a valid expression\n///\n/// @return {List | Null}\n///\n@function get-query-branches($expressions) {\n  $result: \"\";\n  $has-groups: false;\n\n  // Getting initial snapshot and looking for groups\n  @each $expression in $expressions {\n    @if (str-length($result) != 0) {\n      $result: $result + \" and \";\n    }\n\n    @if (type-of($expression) == \"string\") {\n      $result: $result + $expression;\n    } @else if (type-of($expression) == \"list\") {\n      $result: $result + nth($expression, 1);\n      $has-groups: true;\n    } @else {\n      @warn '#{$expression} is not a valid expression.';\n    }\n  }\n\n  // If we have groups, we have to create all possible combinations\n  @if $has-groups {\n    @each $expression in $expressions {\n      @if (type-of($expression) == \"list\") {\n        $first: nth($expression, 1);\n\n        @each $member in $expression {\n          @if ($member != $first) {\n            @each $partial in $result {\n              $result: join(\n                $result,\n                str-replace-first($first, $member, $partial)\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  @return $result;\n}\n\n///\n/// Parses a string to form a media query expression\n///\n/// @author Eduardo Boucas\n///\n/// @param {String}   $expression  - expression (in string)\n///\n/// @throws Expression with type `type-of($expression)` detected, string expected\n/// @throws `$expression` is missing an operator\n/// @throws Unknown unit: `$unit`\n///\n/// @return {String | Null}\n///\n@function parse-expression($expression) {\n  $operator: \"\";\n  $value: \"\";\n  $element: \"\";\n  $result: \"\";\n  $is-width: true;\n\n  @if (type-of($expression) != \"string\") {\n    @warn 'Expression with type `#{type-of($expression)}` detected, string expected.';\n  }\n\n  // Separating the operator from the rest of the expression\n  @if (str-slice($expression, 2, 2) == \"=\") {\n    $operator: str-slice($expression, 1, 2);\n    $value: str-slice($expression, 3);\n  } @else {\n    $operator: str-slice($expression, 1, 1);\n    $value: str-slice($expression, 2);\n  }\n\n  // Checking what type of expression we're dealing with\n  @if map-has-key($breakpoints, $value) {\n    $result: map-get($breakpoints, $value);\n  } @else if map-has-key($media-expressions, $expression) {\n    $result: map-get($media-expressions, $expression);\n    $is-width: false;\n  } @else {\n    $result: to-number($value);\n  }\n\n  @if ($is-width) {\n    $unit: unit($result);\n    $interval: 0;\n\n    @if (map-has-key($unit-intervals, $unit)) {\n      $interval: map-get($unit-intervals, $unit);\n    } @else {\n      @warn 'Unknown unit: #{$unit}';\n    }\n\n    @if ($operator == \">\") {\n      $element: \"(min-width: #{$result + $interval})\";\n    } @else if ($operator == \"<\") {\n      $element: \"(max-width: #{$result - $interval})\";\n    } @else if ($operator == \">=\") {\n      $element: \"(min-width: #{$result})\";\n    } @else if ($operator == \"<=\") {\n      $element: \"(max-width: #{$result})\";\n    } @else {\n      @warn '#{$expression} is missing an operator.';\n    }\n  } @else {\n    $element: $result;\n  }\n\n  @return $element;\n}\n\n///\n/// Replaces the first occurence of the string with the replacement string\n///\n/// @author Eduardo Boucas\n///\n/// @param {String}   $search  - The value being searched for\n/// @param {String}   $replace  - The replacement string\n/// @param {String}   $subject  - The string being replaced on\n///\n/// @return {String | Null}\n///\n@function str-replace-first($search, $replace, $subject) {\n  $search-start: str-index($subject, $search);\n\n  @if $search-start == null {\n    @return $subject;\n  }\n\n  $result: str-slice($subject, 0, $search-start - 1);\n  $result: $result + $replace;\n  $result: $result + str-slice($subject, $search-start + str-length($search));\n\n  @return $result;\n}\n\n///\n/// Casts a number to a string\n///\n/// @author Hugo Giraudel\n///\n/// @param {String}   $string  - Number to be parsed\n///\n/// @return {List | Null}\n///\n@function to-number($string) {\n  // Matrices\n  $strings: \"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\";\n  $numbers: 0 1 2 3 4 5 6 7 8 9;\n\n  // Result\n  $result: 0;\n  $divider: 0;\n  $minus: false;\n\n  // Looping through all characters\n  @for $i from 1 through str-length($string) {\n    $character: str-slice($string, $i, $i);\n    $index: index($strings, $character);\n\n    @if $character == \"-\" {\n      $minus: true;\n    } @else if $character == \".\" {\n      $divider: 1;\n    } @else {\n      @if type-of($index) != \"number\" {\n        $result: if($minus, $result * -1, $result);\n        @return _length($result, str-slice($string, $i));\n      }\n\n      $number: nth($numbers, $index);\n\n      @if $divider == 0 {\n        $result: $result * 10;\n      } @else {\n        // Move the decimal dot to the left\n        $divider: $divider * 10;\n        $number: $number / $divider;\n      }\n\n      $result: $result + $number;\n    }\n  }\n\n  @return if($minus, $result * -1, $result);\n}\n\n@function _length($number, $unit) {\n  $strings: \"px\" \"cm\" \"mm\" \"%\" \"ch\" \"pica\" \"in\" \"em\" \"rem\" \"pt\" \"pc\" \"ex\" \"vw\"\n    \"vh\" \"vmin\" \"vmax\";\n  $units: 1px 1cm 1mm 1% 1ch 1pica 1in 1em 1rem 1pt 1pc 1ex 1vw 1vh 1vmin 1vmax;\n  $index: index($strings, $unit);\n\n  @if type-of($index) != \"number\" {\n    @warn 'Unknown unit `#{$unit}`.';\n    @return false;\n  }\n\n  @return $number * nth($units, $index);\n}\n","@import \"../variables.scss\";\r\n@import \"../breakpoints.scss\";\r\n\r\n.cases {\r\n    height: 50vh;\r\n    // height: calc(var(--vh, 1vh) * 50);\r\n    position: relative;\r\n    .cases-navigation {\r\n        position: absolute;\r\n        bottom: 0;\r\n        width: 100%;\r\n        display: flex;\r\n        justify-content: space-between;\r\n        align-items: center;\r\n        z-index: 6;\r\n        padding: 35px;\r\n        box-sizing: border-box;\r\n        @include media('<=tablet') {\r\n            display: none;\r\n        }\r\n        .cases-arrow {\r\n            background: rgba(0,0,0,.4);\r\n            height: 72px;\r\n            width: 72px;\r\n            border-radius: 100%;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            svg {\r\n                color: $white;\r\n                height: 28px;\r\n                width: 28px;\r\n            }\r\n            &.disabled {\r\n                opacity: 0.3;\r\n            }\r\n        }\r\n    }\r\n    .row {\r\n        @include media('<=tablet') {\r\n            flex-direction: column;\r\n        }\r\n        .case {\r\n            position: relative;\r\n            background: $black;\r\n            cursor: pointer;\r\n            width: 33.333%;\r\n            @include media('<=tablet') {\r\n                width: 100%;\r\n            }\r\n            &:hover {\r\n                .case-image {\r\n                    opacity: .4;\r\n                }\r\n            }\r\n            &-details {\r\n                width: 100%;\r\n                height: 50vh;\r\n                height: calc(var(--vh, 1vh) * 50);\r\n                display: flex;\r\n                flex-direction: column;\r\n                justify-content: center;\r\n                padding: 32px;\r\n                box-sizing: border-box;\r\n                z-index: 1;\r\n                position: relative;\r\n                @include media('<=tablet') {\r\n                    width: 100%;\r\n                }\r\n                @include media('<=phone') {\r\n                    padding: 16px;\r\n                }\r\n                span {\r\n                    margin-top: 156px;\r\n                    font-style: 1.6rem;\r\n                    opacity: .8;\r\n                    font-weight: 600;\r\n                    color: $white;\r\n                    @include media('<=desktop') {\r\n                        font-size: 1.4rem;\r\n                    }\r\n                    @include media('<=phone') {\r\n                        font-size: 1.4rem;\r\n                        line-height: 2.2rem;\r\n                    }\r\n                }\r\n                h2 {\r\n                    font-style: 2.4rem;\r\n                    line-height: 3.4rem;\r\n                    width: 85%;\r\n                    color: $white;\r\n                    margin-top: 16px;\r\n                    @include media('<=desktop') {\r\n                        font-size: 2rem;\r\n                        line-height: 2.4rem;\r\n                    }\r\n                    @include media('<=phone') {\r\n                        font-size: 1.7rem;\r\n                        line-height: 2.2rem;\r\n                        margin-top: 8px;\r\n                    }\r\n                    \r\n                }\r\n            }\r\n            &-image {\r\n                top: 0;\r\n                left: 0;\r\n                width: 100%;\r\n                height: 100%;\r\n                overflow: hidden;\r\n                position: absolute;\r\n                opacity: .65;\r\n                transition: .4s cubic-bezier(.6,-0.5,.1,.99);\r\n                img {\r\n                    height: 100%;\r\n                    width: 100%;\r\n                    object-fit: cover;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"]}